{"name":"Populous","tagline":"Populates a <select> with a remote JSON.","body":"# Populous\r\n\r\n> Populates a `<select>` with a remote JSON.\r\n\r\n## Working Example\r\n\r\nhttp://jsfiddle.net/7tS3e/\r\n\r\n## Usage\r\n\r\n`index.html`:\r\n```html\r\n<select data-source-url=\"options.json\">\r\n\r\n<script>\r\n$('select').populous('load');\r\n</script>\r\n```\r\n\r\n`options.json`:\r\n```javascript\r\n[\"Banana\", \"Apple\", \"Grape\", \"Cranberry\"]\r\n```\r\n\r\nBam! Your `<select>` now has 4 options: `Banana`, `Apple`, `Grape` and `Cranberry`.\r\n\r\n## Configuration\r\n\r\nYou can customize the options by providing a hash when calling the plugin:\r\n\r\n```javascript\r\n$('select').populous({...});\r\n```\r\n\r\n### AJAX\r\n\r\nTo configure the AJAX request, set a `source` key with [jQuery AJAX settings](http://api.jquery.com/jQuery.ajax/#jQuery-ajax-settings):\r\n\r\n```javascript\r\n$('select').populous({\r\n  source: {\r\n    url: '/basket',\r\n    method: 'POST',\r\n    data: {all: 'fruits'}\r\n  }\r\n});\r\n```\r\n\r\nNote that, by default, the method is set to `GET`, and the URL can be set using the attribute `data-source-url` on the `<select>` element.\r\n\r\n### Mapping the response\r\n\r\nPopulous use a `map` function to handle the response.\r\n\r\n```javascript\r\nfunction(response) {\r\n  return [];\r\n}\r\n```\r\n\r\nThe resulting array may comprise arrays (pairs of label and value) or strings (that will be used as both).\r\n\r\nBelow is the default `map` function.\r\n\r\n```javascript\r\nfunction(response) {\r\n  return $.map(response, function(label) {\r\n    return [[label, label]]; // jQuery#map make it flat, so we add depth\r\n  });\r\n}\r\n```\r\n\r\nYou can provide your own map function:\r\n\r\n```javascript\r\n$('select').populous({\r\n  map: function(response) {\r\n    // ...\r\n  }\r\n});\r\n```\r\n\r\n## API\r\n\r\n### Events and states\r\n\r\nThere are 2 new events being fired - `loading` and `loaded` - that happens, respectively, right before the AJAX request and right after the `<select>` is populated with its response.\r\n\r\n```javascript\r\n$('select').on('loading', function() {\r\n  $(this).attr('disabled', true);\r\n});\r\n\r\n$('select').on('loaded', function() {\r\n  $(this).attr('disabled', false);\r\n});\r\n```\r\n\r\nAlso, there's a data property being set to flag when it's loading.\r\n\r\n```javascript\r\nif($('select').data('loading')) {\r\n  alert('Wait!');\r\n} else {\r\n  alert('Ready!');\r\n}\r\n```\r\n\r\n### Updating value\r\n\r\nPopulous does a little patch to allow jQuery's standard method `val` to seamlessly update the `<select>` even when it isn't finished loading.\r\n\r\n```javascript\r\n$('select').populous('load');\r\n$('select').val('Hey!'); //=> Will update when finish loading.\r\n```\r\n\r\n### AMD\r\n\r\nIf you like [RequireJS](http://requirejs.org) you can easily make a module definition for Populous.\r\n\r\n```javascript\r\ndefine('Populous', ['jquery'], function($) {\r\n  \r\n  this.jQuery = $;\r\n\r\n  // Paste here the contents of populous.js\r\n\r\n});\r\n```\r\n\r\n## License\r\n\r\nSee [CC Attribution-ShareAlike 4.0 International](http://creativecommons.org/licenses/by-sa/4.0/deed.en_US)\r\n\r\n## Contribution\r\n\r\n1. Fork it\r\n2. Change it\r\n3. Commit with brief yet meaningful description\r\n4. Send pull request\r\n\r\nAlso, you could report an issue, help to fix or simply comment in one.\r\n","google":"UA-41277078-1","note":"Don't delete this file! It's used internally to help with page regeneration."}